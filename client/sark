#!/usr/bin/python
""" Sark - the properties Gatherer
"""

usage="""
sark - MASTER initial bootup property gathering

	Use: sark [-c <config file>] [-m <xmlrpcurl>] [ -t <net,ib,disk,system> ] [-v] [-d]

	-c <config file>  Specify Alternate Location of configuration file. default: /etc/mcp.conf
	-t <type>         Specify what types of properties to scan for. Can be configure in config file. Default: <net,ib,disk,system>
	-m <xmlrpcurl>    Specify a specific URL for connection to the Master Control Program
	-v                Verbose, prints out each property as it is uploaded to the mcp
	-d                Debug Mode - Only gather properties and output them, Show debug messages
"""

import master
import os
import xmlrpclib
import sys
import getopt
import master.gather
import socket

# Procedure:
#  Parse command line
#  Load Config
#  Run Configured Gather Steps
#
#  Connect to mcp
#  download mcp properties for short hostname
#  update any changes
#    if property name does not exist add it to the database
#  
#
#  Exit
def main():
	
	#defaults
	types=[]
	verbose=None
	serverurl=""

	optlist,args = getopt.getopt(sys.argv[1:],"c:t:m:vdh")

	if args:
		print "Extra Arguments Given:" +args
		return

	for (arg,val) in optlist:
		if arg == "-c":
			master.config["config_file"]=val
		if arg == "-t":
			types += val.split(",")
		if arg == "-m":
			serverurl=val
		if arg == "-v":
			verbose = True
		if arg == "-d":
			master.debug = master.basicdebug
		if arg == "-h":
			print usage
			return
	
	master.load_config()
	
	if serverurl:
		master.config["server_url"]=serverurl
	
	if types:
		master.config["sark_modules"]=types
		
	props={}
	
	for mod in master.config["sark_modules"]:
		try:
			master.debug("Processing <"+mod+"> verb")
			props.update(master.gather.verbs[mod]())
		except KeyError:
			master.debug("Error processing <"+mod+"> verb")

	mcp = xmlrpclib.Server(master.config["server_url"])
	myname = socket.gethostname().split(".")[0]

	sprops = mcp.master.getNodeProperties([myname])
	if sprops.has_key(myname):
		current = sprops[myname]
	else:
		current = []
	#allprops = mcp.master.getProperties()

	# propstoupdate = filter(lambda a: a in current.keys(), props.keys())
	for k,v,ts,cmt in current:
		if props.has_key(k) and props[k] == v:
			master.debug("deleting key <"+k+"> because it is already on the server")
			del(props[k])

	# Everything that is left needs to updated on the server
	for k,v in props.items():
		try:
			if verbose: print "Adding",k," => ",v
			
			res = mcp.master.updateNodeProperty(myname,k,v)
			master.debug("updateNodeProperty: res = "+`res`)
		except xmlrpclib.Fault,msg:
			master.debug("Adding key <"+k+"> to db because:"+str(msg))
			
			try:
				res = mcp.master.addProperty(k,"Added by Sark on "+myname)
				master.debug("addProperty: res="+`res`)
			except xmlrpclib.Fault:
				print >>sys.stderr, "Error adding New property"
				continue  # just move on
			
			try:
				res = mcp.master.updateNodeProperty(myname,k,v)
			except xmlrpclib.Fault,msg:
				print >>sys.stderr,"Error adding "+k+" => "+v+": "+str(msg)

		except Exception,msg: #Will this ever happen
			master.debug("Error updating property:"+k+":"+str(msg))
			


if __name__ == "__main__":
	try:
		main()
	except KeyboardInterrupt:
		pass


