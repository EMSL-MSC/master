#!/usr/bin/env python
#vim: et:ts=4:sw=4

import master
from master import cluster_interface
import xmlrpclib
import pwd
import os
import time
from optparse import OptionParser
from hostparser import parsenodes

def main():
    parser = OptionParser()
    parser.add_option('-w', '--node', help="Node name for event.",
                      dest="node")
    parser.add_option('-l', '--locator', help="DIMM locator.", dest="locator")
    parser.add_option('-c', '--config', help='MASTER config file.',
                      dest='config')
    parser.add_option('-p', '--period',
                      help="Time period (hours) over which to count errors.",
                      dest="window", action="store_int", default=24)
    options, args_left = parser.parse_args()

    if options.config:
        master.config['config_file'] = options.config
    master.load_config()
    mcp = xmlrpclib.Server(master.config["server_url"])
    try:
        nodeList = parsenodes.expand(options.node, [])
    except:
        parser.error("invalid node name given: '%s'")
    if len(nodeList) > 1:
        parser.error("more than one node specified")

    event_window = parser.window*60*60
    event_start = time.localtime() - event_window
    elog = mcp.master.getNodeEventHistory(nodeList,False)
    cluster = getattr(cluster_interface,
                      master.config['cluster_commands'])(
                          master.config['cluster_command_args'])

    operational_statuses = ['ok','allocated']
	try:
		status = mcp.master.getNodeStatus(nodeList)[nodeList[0]]
	except KeyError:
		# The node doesn't have a status yet, assume it is 'ok'
		status = ('ok',)

    if status[0] in operational_statuses:
        mcp.master.storeNodeEvent(nodeList, 'MCE',
                                  get_current_user(), options.locator)

        try:
            event_count = count_events(elog, event_start)[nodeList[0]]
        except KeyError:
            event_count = 0
        if event_count >= 100:
            cluster.mark_nodes_for_maint(
                "PNNLCHECK: More than 100 Machine Check Events.",
                nodeList)
            mcp.master.storeNodeEvent(nodeList, 'MCE_MAINT',
                                      get_current_user(), options.locator)

def count_events(event_history, event_start):
    """count_events(dict) -> dict

    Takes the dict of logs and counts the number of entries up to
    the last (time ordered) MCE_MAINT event. Groups counts by
    DIMM and returns the highest count.

    Returns a dictionary of {hostname: count} values
    """
    ret = {}
    for node, logs in event_history.iteritems():
        logs.sort(cmp = lambda x, y: cmp(float(y[1]),float(x[1])))
        dimm_counts = {}
        max_count = 0
        for log in logs:
            if log[0] == 'MCE_MAINT':
                break
            if log[1] < event_start:
                break
            dimm_counts[log[2]] = dimm_counts.get(log[2], 0) + 1
            if dimm_counts[log[2]] > max_count:
                max_count = dimm_counts[log[2]]
        ret[node] = max_count

    return ret


def get_current_user():
    return os.getenv('SUDO_USER', pwd.getpwuid(os.getuid())[0])


if __name__ == "__main__":
    main()

