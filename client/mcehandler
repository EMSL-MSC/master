#!/usr/bin/env python
#vim: et:ts=4:sw=4
#
# Copyright © 2008,2009, Battelle Memorial Institute
# All rights reserved.
# 
# 1.	Battelle Memorial Institute (hereinafter Battelle) hereby grants permission
# 	to any person or entity lawfully obtaining a copy of this software and
# 	associated documentation files (hereinafter “the Software”) to redistribute
# 	and use the Software in source and binary forms, with or without
# 	modification.  Such person or entity may use, copy, modify, merge, publish,
# 	distribute, sublicense, and/or sell copies of the Software, and may permit
# 	others to do so, subject to the following conditions:
# 
# 	•	Redistributions of source code must retain the above copyright
# 		notice, this list of conditions and the following disclaimers. 
# 	•	Redistributions in binary form must reproduce the above copyright
# 		notice, this list of conditions and the following disclaimer in the
# 		documentation and/or other materials provided with the distribution.
# 	•	Other than as used herein, neither the name Battelle Memorial
# 		Institute or Battelle may be used in any form whatsoever without the
# 		express written consent of Battelle.  
# 	•	Redistributions of the software in any form, and publications based
# 		on work performed using the software should include the following
# 		citation as a reference:
# 
# 			(A portion of) The research was performed using EMSL, a
# 			national scientific user facility sponsored by the
# 			Department of Energy's Office of Biological and
# 			Environmental Research and located at Pacific Northwest
# 			National Laboratory.
# 
# 2.	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# 	AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# 	IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# 	ARE DISCLAIMED. IN NO EVENT SHALL BATTELLE OR CONTRIBUTORS BE LIABLE FOR ANY
# 	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# 	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# 	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# 	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# 	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# 	THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# 3.	The Software was produced by Battelle under Contract No. DE-AC05-76RL01830
# 	with the Department of Energy.  The U.S. Government is granted for itself
# 	and others acting on its behalf a nonexclusive, paid-up, irrevocable
# 	worldwide license in this data to reproduce, prepare derivative works,
# 	distribute copies to the public, perform publicly and display publicly, and
# 	to permit others to do so.  The specific term of the license can be
# 	identified by inquiry made to Battelle or DOE.  Neither the United States
# 	nor the United States Department of Energy, nor any of their employees,
# 	makes any warranty, express or implied, or assumes any legal liability or
# 	responsibility for the accuracy, completeness or usefulness of any data,
# 	apparatus, product or process disclosed, or represents that its use would
# 	not infringe privately owned rights.  
# 

import master
from master import cluster_interface
import xmlrpclib
import pwd
import os
import time
from optparse import OptionParser
from hostparser import parsenodes

def main():
    parser = OptionParser()
    parser.add_option('-w', '--node', help="Node name for event.",
                      dest="node")
    parser.add_option('-l', '--locator', help="DIMM locator.", dest="locator")
    parser.add_option('-c', '--config', help='MASTER config file.',
                      dest='config')
    parser.add_option('-p', '--period',
                      help="Time period (hours) over which to count errors.",
                      dest="window", action="store_int", default=24)
    options, args_left = parser.parse_args()

    if options.config:
        master.config['config_file'] = options.config
    master.load_config()
    mcp = xmlrpclib.Server(master.config["server_url"])
    try:
        nodeList = parsenodes.expand(options.node, [])
    except:
        parser.error("invalid node name given: '%s'")
    if len(nodeList) > 1:
        parser.error("more than one node specified")

    event_window = parser.window*60*60
    event_start = time.localtime() - event_window
    elog = mcp.master.getNodeEventHistory(nodeList,False)
    cluster = getattr(cluster_interface,
                      master.config['cluster_commands'])(
                          master.config['cluster_command_args'])

    operational_statuses = ['ok','allocated']
	try:
		status = mcp.master.getNodeStatus(nodeList)[nodeList[0]]
	except KeyError:
		# The node doesn't have a status yet, assume it is 'ok'
		status = ('ok',)

    if status[0] in operational_statuses:
        mcp.master.storeNodeEvent(nodeList, 'MCE',
                                  get_current_user(), options.locator)

        try:
            event_count = count_events(elog, event_start)[nodeList[0]]
        except KeyError:
            event_count = 0
        if event_count >= 100:
            cluster.mark_nodes_for_maint(
                "PNNLCHECK: More than 100 Machine Check Events.",
                nodeList)
            mcp.master.storeNodeEvent(nodeList, 'MCE_MAINT',
                                      get_current_user(), options.locator)

def count_events(event_history, event_start):
    """count_events(dict) -> dict

    Takes the dict of logs and counts the number of entries up to
    the last (time ordered) MCE_MAINT event. Groups counts by
    DIMM and returns the highest count.

    Returns a dictionary of {hostname: count} values
    """
    ret = {}
    for node, logs in event_history.iteritems():
        logs.sort(cmp = lambda x, y: cmp(float(y[1]),float(x[1])))
        dimm_counts = {}
        max_count = 0
        for log in logs:
            if log[0] == 'MCE_MAINT':
                break
            if log[1] < event_start:
                break
            dimm_counts[log[2]] = dimm_counts.get(log[2], 0) + 1
            if dimm_counts[log[2]] > max_count:
                max_count = dimm_counts[log[2]]
        ret[node] = max_count

    return ret


def get_current_user():
    return os.getenv('SUDO_USER', pwd.getpwuid(os.getuid())[0])


if __name__ == "__main__":
    main()

