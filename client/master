#!/usr/bin/python
# -*- coding: UTF-8 -*-
# vim: noet:ts=4:sw=4
#
# Copyright © 2008,2009, Battelle Memorial Institute
# All rights reserved.
# 
# 1.	Battelle Memorial Institute (hereinafter Battelle) hereby grants permission
# 	to any person or entity lawfully obtaining a copy of this software and
# 	associated documentation files (hereinafter “the Software”) to redistribute
# 	and use the Software in source and binary forms, with or without
# 	modification.  Such person or entity may use, copy, modify, merge, publish,
# 	distribute, sublicense, and/or sell copies of the Software, and may permit
# 	others to do so, subject to the following conditions:
# 
# 	•	Redistributions of source code must retain the above copyright
# 		notice, this list of conditions and the following disclaimers. 
# 	•	Redistributions in binary form must reproduce the above copyright
# 		notice, this list of conditions and the following disclaimer in the
# 		documentation and/or other materials provided with the distribution.
# 	•	Other than as used herein, neither the name Battelle Memorial
# 		Institute or Battelle may be used in any form whatsoever without the
# 		express written consent of Battelle.  
# 	•	Redistributions of the software in any form, and publications based
# 		on work performed using the software should include the following
# 		citation as a reference:
# 
# 			(A portion of) The research was performed using EMSL, a
# 			national scientific user facility sponsored by the
# 			Department of Energy's Office of Biological and
# 			Environmental Research and located at Pacific Northwest
# 			National Laboratory.
# 
# 2.	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# 	AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# 	IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# 	ARE DISCLAIMED. IN NO EVENT SHALL BATTELLE OR CONTRIBUTORS BE LIABLE FOR ANY
# 	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# 	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# 	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# 	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# 	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# 	THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# 3.	The Software was produced by Battelle under Contract No. DE-AC05-76RL01830
# 	with the Department of Energy.  The U.S. Government is granted for itself
# 	and others acting on its behalf a nonexclusive, paid-up, irrevocable
# 	worldwide license in this data to reproduce, prepare derivative works,
# 	distribute copies to the public, perform publicly and display publicly, and
# 	to permit others to do so.  The specific term of the license can be
# 	identified by inquiry made to Battelle or DOE.  Neither the United States
# 	nor the United States Department of Energy, nor any of their employees,
# 	makes any warranty, express or implied, or assumes any legal liability or
# 	responsibility for the accuracy, completeness or usefulness of any data,
# 	apparatus, product or process disclosed, or represents that its use would
# 	not infringe privately owned rights.  
# 

""" master - general MASTER project control program
"""
usage="""
master - general MASTER project control program

	Use: master [-c <config file>] [-m <xmlrpcurl>] [-d] <action options>

	Actions:
        [ -s <StatusName> [ -D <Status Description> ] ]
		[ -S ]
		[ -u username -D <User Display Name> ]
        [ -w NodeList] [ -a ]
                       [ -l [ -f ] [ -T ]]
                       [ -p [ -f ] [ -T ]]
                       [ -L ]
                       [ -P ]
                       [ -t <status> [ -r <comment> ] ]
					   [ -n <comment> ]
                       [ -o <property> -i <value> [ -r <comment> ] ]
                       [ -e <event> [ -r <comment> ] ]

	-c <config file>  Specify Alternate Location of configuration file. default: /etc/mcp.conf
	-m <xmlrpcurl>    Specify a specific URL for connection to the Master Control Program
	-v                Verbose, prints out extra information where possible
	-d                Debug Mode - Show debug messages

	-w <NodeList>     Select Nodes for Action. default: local hostname

	-a                Add a given list of nodes to the master system
	-s <StatusName>   Add a new Status type to the master system
	-D <StatusDescription> A short description of the status state
	-S                List all available statuses

	-l                Show a node status Log (10 entries)
	-p                Show a node property Log (10 entries)
	-E				  Show a node event Log (10 entries)
	-f                Show the full set of properties or statuses availible when using -l,-p options
	-F <n>			  Limit the output to n lines.

	-L                Show the state of a list of Nodes
	-P                Show the current properties of a list of Nodes

	-t <status>       Set the Current Status of a node.
	-o <property>     Set a property on a host.
	-i <value>        The Value of the set property
	-r <Reason>       Add a Reason or Comment on the Status, Property Change or Event

	-n <comment>      Add a Note about a system
    -e <event>        Add an event for a system
"""

import master
import os
import xmlrpclib
import sys
import getopt
import socket
import pwd
from time import strftime,localtime,strptime,mktime
from hostparser import parsenodes

def dt(epoch):
	try:
		return strftime("%F %T", localtime(epoch))
	except TypeError,msg:
		master.debug("Failed to convert epoch: <"+str(epoch)+"> to string:"+str(msg))
		return "unknown"

# Procedure:
#  Parse command line
#  Load Config
#  Run Configured Gather Steps
#
#  Connect to mcp
#  download mcp properties for short hostname
#  update any changes
#    if property name does not exist add it to the database
#  
#
#  Exit
def main():
	types=[]
	verbose=None
	all=False
	all_limit=False
	nodeList=[socket.gethostname().split(".")[0]]
	listProperty=False
	listStatus=False
	listEvents=False
	addNodes=False
	addStatus=False
	showStatus=False
	showProperty=False
	addUser=False
	makeComment=False
	showAllStatuses=False
	eventStore=False
	description=""
	reason=""
	propertyValue=""
	statusValue=""
	comment=""
	property=""
	serverurl=""
	timeOrdered = False
	start_date = None
	end_date = None

	optlist,args = getopt.getopt(sys.argv[1:],
							"c:m:vdhas:D:lpLPt:To:i:r:w:fF:u:n:S:e:E",
                              ['start-date=', 'end-date='])

	if args:
		print "Extra Arguments Given:" + str(args)
		return

	actioncount=0
	for (arg,val) in optlist:
		if arg == "-c":
			master.config["config_file"]=val
		if arg == "-m":
			serverurl=val
		if arg == "-v":
			verbose = True
		if arg == "-d":
			master.debug = master.basicdebug

		if arg == "-a":
			addNodes = True #FIXME need to expand this later
			actioncount += 1
		if arg == "-s":
			addStatus = val
			actioncount += 1
		if arg == "-u":
			addUser = val
			actioncount += 1
		if arg == "-D":
			description=val

		if arg == "-w":
			nodeList = parsenodes.expand(val,[])

		if arg == "-l":
			listStatus = True
			actioncount += 1
		if arg == "-p":
			listProperty = True
			actioncount += 1
		if arg == "-E":
			listEvents = True
			actioncount += 1

		if arg == '-f':
			all = True
		if arg == "-F":
			try:
				all_limit = int(val)
			except ValueError:
				print >>sys.stderr, "ERROR: argument to -f must be an integer: %s"% val

		if arg == '-L':
			showStatus = True
			actioncount += 1
		if arg == '-P':
			showProperty =True
			actioncount += 1

		if arg == '-T':
			timeOrdered = True

		if arg == '-t':
			statusValue = val
			actioncount += 1
		if arg == '-o':
			property = val
			actioncount += 1
		if arg == '-i':
			propertyValue = val
		if arg == '-r':
			comment = val

		if arg == '-n':
			makeComment = val
			actioncount += 1

		if arg == '-e':
			eventStore = val
			actioncount += 1

		if arg == '-S':
			showAllStatuses = True
			actioncount += 1

		if arg == '--start-date':
			try:
				start_date = strptime(val, '%Y-%m-%d')
			except ValueError:
				print "start date format was not YYYY-MM-DD"
				print usage
				return

		if arg == '--end-date':
			try:
				end_date = strptime(val, '%Y-%m-%d')
			except ValueError:
				print "end date format was not YYYY-MM-DD"
				print usage
				return

		if arg == "-h":
			print usage
			return

	if actioncount != 1:
		print "You have specified an invalid number of actions.  You must specify exactly 1 action. You specfied:",actioncount
		print usage
		return

	if ( listProperty or listStatus or addNodes or showStatus\
         or showProperty or makeComment or property or eventStore\
         or listEvents)\
         and not nodeList:

		print "You have not provided a node list for processing"
		print usage
		return

		master.debug("nodeList="+str(nodeList))

	master.load_config()
	if serverurl:
		master.config["server_url"]=serverurl

	mcp = xmlrpclib.Server(master.config["server_url"])

	if start_date or end_date:
		if not start_date:
			start_date = '-infinity'
			end_date = mktime(end_date)
		elif not end_date:
			end_date = 'infinity'
			start_date = mktime(start_date)
		else:
			start_date = mktime(start_date)
			end_date = mktime(end_date)

	if listProperty:
		plog = None
		if start_date or end_date:
			plog = mcp.master.getNodePropertyHistory(nodeList,False,start_date,end_date)
		else:
			plog = mcp.master.getNodePropertyHistory(nodeList)
		master.debug("Result of getNodePropertyHistory: "+str(plog))
		if plog:
			if timeOrdered:
				print_time_ordered_logs(plog, all, all_limit,
							log_type='property')
			else:
				print_logs(plog, all, all_limit, log_type='property')

	elif listStatus:
		slog = None
		if start_date or end_date:
			slog=mcp.master.getStatusHistory(nodeList,False,start_date,end_date)
		else:
			slog=mcp.master.getStatusHistory(nodeList)
		master.debug("result of getStatusHistory: "+str(slog))
		if slog:
			if timeOrdered:
				print_time_ordered_logs(slog, all, all_limit,
							log_type='status')
			else:
				print_logs(slog, all, all_limit, log_type='status')
	elif listEvents:
		elog = None
		if start_date or end_date:
			master.debug("Calling getNodeEventHistory(%s,False,%s,%s)"% (
                  nodeList,
                  start_date,
                  end_date))
			elog = mcp.master.getNodeEventHistory(nodeList,False,
									start_date,end_date)
		else:
			master.debug("Calling getNodeEventHistory(%s)"% (
                  nodeList))
			elog = mcp.master.getNodeEventHistory(nodeList)
		master.debug("Result of getNodeEventHistory:" + str(elog))
		if elog:
			if timeOrdered:
				print_time_ordered_logs(elog, all, all_limit,
							log_type='event')
			else:
				print_logs(elog, all, all_limit, log_type='event')

	elif addNodes:
		for node in nodeList:
			try:
				mcp.master.addNode(node)
			except xmlrpclib.Fault, e:
				print >>sys.stderr,"Adding Node Failed:", e

	elif addStatus:
		try:
			mcp.master.addStatus(addStatus,description)
		except xmlrpclib.Fault, e:
			print >>sys.stderr,"Add Status Failed", e

	elif addUser and description:
		try:
			mcp.master.addUser(addUser,description)
		except xmlrpclib.Fault, e:
			print >>sys.stderr, "Add User Failed", e

	elif showProperty:
		res = mcp.master.getNodeProperties(nodeList)
		if res:
			for node,props in res.items():
				print node+":"
				for l in props:
					print " ",dt(l[2]),":",l[0],"=",l[1],"   ",l[3]
		
	elif showStatus:
		res = mcp.master.getNodeStatus(nodeList)
		if res:
			for node,stats in res.items():
				print node+":",dt(stats[1]),":",stats[0],"by",stats[2],"   C:",stats[3]

	elif statusValue:
		try:
			mcp.master.updateStatus(nodeList,statusValue,pwd.getpwuid(os.getuid())[0],comment)
		except xmlrpclib.Fault, e:
			print >>sys.stderr, "Error Setting Status:", e
	
	elif makeComment:
		try:
			statuses = mcp.master.getNodeStatus(nodeList)
			#print statuses
			for node in nodeList:
				mcp.master.updateStatus([node],statuses[node][0],pwd.getpwuid(os.getuid())[0],makeComment)
		except xmlrpclib.Fault, e:
			print >>sys.stderr, "Error Setting Status:", e
    elif eventStore:
        try:
            mcp.master.storeNodeEvent(nodeList, eventStore,
                                        pwd.getpwuid(os.getuid())[0], comment)
        except xmlrpclib.Fault, e:
            print >>sys.stderr, "Error storing event:", e

	elif showAllStatuses:
		try:
			stati=mcp.master.getStatus()
			for k,v in stati.items():
				print k,":",v
		except xmlrpclib.Fault, e:
			print >>sys.stderr, "Error Listing Statuses:", e

	elif property:
		for node in nodeList:
			master.debug("setting <"+node+"> property <"+property+"> to <"+propertyValue+">")
			try:
				res = mcp.master.updateNodeProperty(node,property,propertyValue)
				master.debug("updateNodeProperty: res = "+`res`)
			except xmlrpclib.Fault, e:
				print >>sys.stderr, "Error Setting Property:", e

	else:
		print "unhandled options:",sys.argv


def print_time_ordered_logs(logs, all, all_limit, log_type):
	ret = []
	if not all:
		ret = [[name] + log for name,ret in logs.iteritems()
					for log in ret[-10:]]
	elif all and all_limit:
		ret = [[name] + log for name, ret in logs.iteritems()
				for log in ret[-all_limit:]]
	else:
		ret= [[name] + log for name,ret in logs.iteritems() for log in ret]
	sorted_nodes = parsenodes.expand(','.join(logs.keys()),[])
	ret.sort(cmp=lambda x,y: cmp((x[2],sorted_nodes.index(x[0])),
									(y[2],sorted_nodes.index(y[0]))))
	for log in ret:
		if log_type == 'property':
			print "%s %s: %s=%s   %s"% (log[0],
								dt(log[3]),log[1],log[2],log[4])
		else:
			print "%s %s: %s by %s   C: %s"% (log[0], dt(log[2]), log[1],
												log[3],log[4])

def print_logs(input_logs, all, all_limit, log_type):
	for node,logs in input_logs.iteritems():
		if not all:
			logs=logs[-10:]
		elif all_limit:
			logs = logs[-all_limit:]
		print node+":"
		for l in logs:
			master.debug(str(l))
			if log_type == "property":
				print "  %s: %s = %s     %s"% (dt(l[2]),l[0],l[1],l[3])
			else:
				print "  %s: %s by %s   C: %s"% (dt(l[1]),
												l[0], l[2], l[3])


if __name__ == "__main__":
	try:
		main()
	except KeyboardInterrupt:
		pass
	except xmlrpclib.ProtocolError, e:
		if e.errcode == 401:
			print >>sys.stderr, "Authentication error:", e.errmsg
		else:
			raise
