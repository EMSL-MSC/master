#!/usr/bin/python
""" master - general MASTER project control program
"""

usage="""
master - general MASTER project control program

	Use: master [-c <config file>] [-m <xmlrpcurl>] [-d] <action options>
	
	Actions:
        [ -s <StatusName> [ -D <Status Description> ] ]
		[ -u username -D <User Display Name> ]
        [ -w NodeList] [ -a ]
                       [ -l [ -f ] ]
                       [ -p [ -f ] ]
                       [ -L ]
                       [ -P ]
                       [ -t <status> [ -r <comment> ] ]
                       [ -o <property> -i <value> [ -r <comment> ] ]
					
	-c <config file>  Specify Alternate Location of configuration file. default: /etc/mcp.conf
	-m <xmlrpcurl>    Specify a specific URL for connection to the Master Control Program
	-v                Verbose, prints out extra information where possible
	-d                Debug Mode - Show debug messages

	-w <NodeList>     Select Nodes for Action. default: local hostname 

	-a                Add a given list of nodes to the master system
	-s <StatusName>   Add a new Status type to the master system
	-D <StatusDescription> A short description of the status state

	-l                Show a node status Log (10 entries)
	-p                Show a node property Log (10 entries)
	-f                Show the full set of properties availible when using -l,-p options

	-L                Show the state of a list of Nodes
	-P                Show the current properties of a list of Nodes

	-t <status>       Set the Current Status of a node.
	-o <property>     Set a property on a host.
	-i <value>        The Value of the set property
	-r <Reason>       Add a Reason or Comment on the Status or Property Change
"""

import master
import os
import xmlrpclib
import sys
import getopt
import master.gather
import socket
import pwd
from time import strftime,localtime


def dt(epoch):
	try:
		return strftime("%F %T", localtime(epoch))
	except TypeError:
		master.debug("Failed to convert epoch: <"+str(epoch)+"> to string")
		return "unknown"

# Procedure:
#  Parse command line
#  Load Config
#  Run Configured Gather Steps
#
#  Connect to mcp
#  download mcp properties for short hostname
#  update any changes
#    if property name does not exist add it to the database
#  
#
#  Exit
def main():
	types=[]
	verbose=None
	all=False
	nodeList=[socket.gethostname().split(".")[0]]
	listProperty=False
	listStatus=False
	addNodes=False
	addStatus=False
	showStatus=False
	showProperty=False
	addUser=False
	description=""
	reason=""
	propertyValue=""
	statusValue=""
	property=""

	optlist,args = getopt.getopt(sys.argv[1:],"c:m:vdhas:D:lpLPt:o:i:r:w:fu:")

	if args:
		print "Extra Arguments Given:" + str(args)
		return

	actioncount=0
	for (arg,val) in optlist:
		if arg == "-c":
			master.config["config_file"]=val
		if arg == "-m":
			master.config["server_url"]=val
		if arg == "-v":
			verbose = True
		if arg == "-d":
			master.debug = master.basicdebug

		if arg == "-a":
			addNodes = True #FIXME need to expand this later
			actioncount += 1
		if arg == "-s":
			addStatus = val
			actioncount += 1
		if arg == "-u":
			addUser = val
			actioncount += 1
		if arg == "-D":
			description=val

		if arg == "-w":
			nodeList = [val]

		if arg == "-l":
			listStatus = True
			actioncount += 1
		if arg == "-p":
			listProperty = True
			actioncount += 1
		if arg == '-f':
			all = True

		if arg == '-L':
			showStatus = True
			actioncount += 1
		if arg == '-P':
			showProperty =True
			actioncount += 1

		if arg == '-t':
			statusValue = val
			actioncount += 1
		if arg == '-o':
			property = val
			actioncount += 1
		if arg == '-i':
			propertyValue = val
		if arg == '-r':
			comment = val

		if arg == "-h":
			print usage
			return
	
	if actioncount != 1:
		print "You have specified an invalid number of actions.  You must specify exactly 1 action. You specfied:",actioncount
		print usage
		return

	master.load_config()

	mcp = xmlrpclib.Server(master.config["server_url"])

	if listProperty:
		plog = mcp.master.getNodePropertyHistory(nodeList)
		master.debug("Result of getNodePropertyHistory: "+str(plog))
		if plog:
			for node,logs in plog.items():
				if not all:
					logs=logs[-10:]
				print node+":"
				for l in logs:
					print " ",dt(l[2]),":",l[0],"=",l[1],"   ",l[3]
			
	elif listStatus:
		slog=mcp.master.getStatusHistory(nodeList)
		master.debug("result of getStatusHistory: "+str(slog))
		if slog:
			for node,logs in slog.items():
				if not all:
					logs=logs[-10:]
				print node+":"
				for l in logs:
					print " ",dt(l[1]),":",l[0],"by",l[2],"   C:",l[3]
	
	elif addNodes:
		for node in nodeList:
			try:
				mcp.master.addNode(nodeList)
			except xmlrpclib.Fault, e:
				print >>sys.stderr,"Adding Node Failed:", e
		
	elif addStatus:
		try:
			mcp.master.addStatus(addStatus,description)
		except xmlrpclib.Fault, e:
			print >>sys.stderr,"Add Status Failed", e

	elif addUser and description:
		try:
			mcp.master.addUser(addUser,description)
		except xmlrpclib.Fault, e:
			print >>sys.stderr, "Add User Failed", e

	elif showProperty:
		res = mcp.master.getNodeProperties(nodeList)
		if res:
			for node,props in res.items():
				print node+":"
				for l in props:
					print " ",dt(l[2]),":",l[0],"=",l[1],"   ",l[3]
		
	elif showStatus:
		res = mcp.master.getNodeStatus(nodeList)
		if res:
			for node,stats in res.items():
				print node+":",dt(stats[1]),":",stats[0],"by",stats[2],"   C:",stats[3]

	elif statusValue:
		try:
			mcp.master.updateStatus(nodeList,statusValue,pwd.getpwuid(os.getuid())[0],comment)
		except xmlrpclib.Fault, e:
			print >>sys.stderr, "Error Setting Status:", e
			
		
if __name__ == "__main__":
	try:
		main()
	except KeyboardInterrupt:
		pass


	
