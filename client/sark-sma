#!/usr/bin/python
# -*- coding: UTF-8 -*-
#
# Copyright © 2008,2009, Battelle Memorial Institute
# All rights reserved.
# 
# 1.	Battelle Memorial Institute (hereinafter Battelle) hereby grants permission
# 	to any person or entity lawfully obtaining a copy of this software and
# 	associated documentation files (hereinafter “the Software”) to redistribute
# 	and use the Software in source and binary forms, with or without
# 	modification.  Such person or entity may use, copy, modify, merge, publish,
# 	distribute, sublicense, and/or sell copies of the Software, and may permit
# 	others to do so, subject to the following conditions:
# 
# 	•	Redistributions of source code must retain the above copyright
# 		notice, this list of conditions and the following disclaimers. 
# 	•	Redistributions in binary form must reproduce the above copyright
# 		notice, this list of conditions and the following disclaimer in the
# 		documentation and/or other materials provided with the distribution.
# 	•	Other than as used herein, neither the name Battelle Memorial
# 		Institute or Battelle may be used in any form whatsoever without the
# 		express written consent of Battelle.  
# 	•	Redistributions of the software in any form, and publications based
# 		on work performed using the software should include the following
# 		citation as a reference:
# 
# 			(A portion of) The research was performed using EMSL, a
# 			national scientific user facility sponsored by the
# 			Department of Energy's Office of Biological and
# 			Environmental Research and located at Pacific Northwest
# 			National Laboratory.
# 
# 2.	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# 	AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# 	IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# 	ARE DISCLAIMED. IN NO EVENT SHALL BATTELLE OR CONTRIBUTORS BE LIABLE FOR ANY
# 	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# 	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# 	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# 	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# 	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# 	THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# 3.	The Software was produced by Battelle under Contract No. DE-AC05-76RL01830
# 	with the Department of Energy.  The U.S. Government is granted for itself
# 	and others acting on its behalf a nonexclusive, paid-up, irrevocable
# 	worldwide license in this data to reproduce, prepare derivative works,
# 	distribute copies to the public, perform publicly and display publicly, and
# 	to permit others to do so.  The specific term of the license can be
# 	identified by inquiry made to Battelle or DOE.  Neither the United States
# 	nor the United States Department of Energy, nor any of their employees,
# 	makes any warranty, express or implied, or assumes any legal liability or
# 	responsibility for the accuracy, completeness or usefulness of any data,
# 	apparatus, product or process disclosed, or represents that its use would
# 	not infringe privately owned rights.  
# 
""" Sark-SMA - the properties Gatherer for HP SMA's
"""

usage="""
sark-sma - MASTER SMA property gathering

	Use: sark-sma [-c <config file>] [-m <xmlrpcurl>] [ -s <server> ] [ -a <sma>,<sma>,...] [-v] [-d]

	-c <config file>  Specify Alternate Location of configuration file. default: /etc/mcp.conf
	-s <server>       Specify Server to connect to to run sssu on.
	-u <username>     Specify Server Username
	-a <sma>,<sma>,.. Specify list of SMA's to connect to for hsv information
	-m <xmlrpcurl>    Specify a specific URL for connection to the Master Control Program
	-v                Verbose, prints out each property as it is uploaded to the mcp
	-d                Debug Mode - Only gather properties and output them, Show debug messages
"""

import master
import master.sma
import os
import xmlrpclib
import sys
import getopt
import socket

# Procedure:
#  Parse command line
#  Load Config
#  Run Configured Gather Steps
#
#  Connect to mcp
#  download mcp properties for short hostname
#  update any changes
#    if property name does not exist add it to the database
#  
#
#  Exit
def main():
	
	#defaults
	smas=[]
	server=None
	verbose=None
	server_user=None
	serverurl=""

	optlist,args = getopt.getopt(sys.argv[1:],"c:s:u:a:m:vdh")

	if args:
		print "Extra Arguments Given:" +args
		return

	for (arg,val) in optlist:
		if arg == "-c":
			master.config["config_file"]=val
		if arg == "-a":
			smas += val.split(",")
		if arg == "-s":
			server = val;
		if arg == "-u":
			server_user = val;
		if arg == "-m":
			serverurl=val
		if arg == "-v":
			verbose = True
		if arg == "-d":
			master.debug = master.basicdebug
		if arg == "-h":
			print usage
			return
	
	master.load_config()
	master.load_privileged_config()
	
	if serverurl:
		master.config["server_url"]=serverurl

	if server_user:
		master.config["sma_server_username"]	

	if smas:
		master.config["sma_list"]=smas

	if server:
		master.config["sma_server"]=server
		
	props={}
	
	mcp = xmlrpclib.Server(master.config["server_url"])
	myname = socket.gethostname().split(".")[0]

	hsvs = master.sma.get_hsv_info(
        master.config["sma_server"], master.config["sma_list"],
        master.config["sma_server_username"], master.config["sma_username"],
        master.config["sma_password"])

	for hsv in hsvs:
		props = hsvs[hsv]
		if verbose: print "Processing:",hsv

		#check to see if node exists:
		nodes = mcp.master.getNodes([hsv])
		if len(nodes) == 0:
			print "hsv node:",hsv,"does not exist in database"
			continue


		sprops = mcp.master.getNodeProperties([hsv])
		if sprops.has_key(hsv):
			current = sprops[hsv]
		else:
			if verbose: print "hsv node:",hsv,"no  properties found"
			current = []

		# propstoupdate = filter(lambda a: a in current.keys(), props.keys())
		for k,v,ts,cmt in current:
			if props.has_key(k) and props[k] == v:
				master.debug("deleting key <"+k+"> because it is already on the server")
				del(props[k])

		# Everything that is left needs to updated on the server
		for k,v in props.items():
			try:
				if verbose: print "Adding",k," => ",v
				
				res = mcp.master.updateNodeProperty(hsv,k,v)
				master.debug("updateNodeProperty: res = "+`res`)
			except xmlrpclib.Fault,msg:
				master.debug("Adding key <"+k+"> to db because:"+str(msg))
				
				try:
					res = mcp.master.addProperty(k,"Added by Sark on "+myname)
					master.debug("addProperty: res="+`res`)
				except xmlrpclib.Fault:
					print >>sys.stderr, "Error adding New property"
					continue  # just move on
				
				try:
					res = mcp.master.updateNodeProperty(hsv,k,v)
					pass
				except xmlrpclib.Fault,msg:
					print >>sys.stderr,"Error adding "+k+" => "+v+": "+str(msg)

			except Exception,msg: #Will this ever happen
				master.debug("Error updating property:"+k+":"+str(msg))
				


if __name__ == "__main__":
	try:
		main()
	except KeyboardInterrupt:
		pass


